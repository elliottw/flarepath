(page "index.html")

(defc text-input "")
(defc recurring-income ["" "" "" ""])
(html
  (head
    (link :href "app.css" :rel "stylesheet" :type "text/css"))
  (body
   (h1 "Hello, Hoplon!")
     (p
     "Each input example has a corresponding Javelin cell.
      When you change the input its cell is updated.")
    (h2 "A simple text input")
    (p "This shows that you can have more than one field pointing to the same
      cell. Edit one input and see everything change in sync.")
    (input
      :type "text"
      :placeholder "Type something here"

      ;; The cell is used as the value of the input.
      :value text-input

      ;; The on-keyup event fires on every keystroke for demo purposes. In
      ;; practice you should only update on-blur or on-change.
      :keyup #(reset! text-input @%))
      ;; On all the examples we are using the event to get the value of the
      ;; input. So no id is necessary.
    (let [new-todo-txt (cell "")]
      (form
       :submit #(do (new! @new-todo-txt)
                    (reset! new-todo-txt "")
                    (.preventDefault %))
       (input
        :id "new-todo"
        :type "text"
        :autofocus true
        :placeholder "What needs to be done?"
        :value new-todo-txt
        :change #(reset! new-todo-txt @%)
        :blur   #(reset! new-todo-txt ""))))
    ;; This second input is just to show that you can point two inputs to the
    ;; same cell and update them in sync. It's the same as the first input.
;;    (map
;;     (fn [a]
;;      :type "text"
;;      :placeholder "Type something here"
;;      :value a
;;      :keyup #(reset! a @%)) recurring-income)
;;    (p (text "month 1: ~{(* 1 text-input)}"))
;;    (p (text "month 2: ~{(* 2 text-input)}"))
;;    (p (text "month 3: ~{(* 3 text-input)}"))
    ))
